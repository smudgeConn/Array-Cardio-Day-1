<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Array Cardio 💪</title>
  <link rel="icon" href="https://fav.farm/🔥" />
</head>
<body>
  <p><em>Psst: have a look at the JavaScript Console</em> 💁</p>
  <script>
    // Get your shorts on - this is an array workout!
    // ## Array Cardio Day 1

    // Some data we can work with

    const inventors = [
      { first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 },
      { first: 'Isaac', last: 'Newton', year: 1643, passed: 1727 },
      { first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642 },
      { first: 'Marie', last: 'Curie', year: 1867, passed: 1934 },
      { first: 'Johannes', last: 'Kepler', year: 1571, passed: 1630 },
      { first: 'Nicolaus', last: 'Copernicus', year: 1473, passed: 1543 },
      { first: 'Max', last: 'Planck', year: 1858, passed: 1947 },
      { first: 'Katherine', last: 'Blodgett', year: 1898, passed: 1979 },
      { first: 'Ada', last: 'Lovelace', year: 1815, passed: 1852 },
      { first: 'Sarah E.', last: 'Goode', year: 1855, passed: 1905 },
      { first: 'Lise', last: 'Meitner', year: 1878, passed: 1968 },
      { first: 'Hanna', last: 'Hammarström', year: 1829, passed: 1909 }
    ];

    const people = [
      'Bernhard, Sandra', 'Bethea, Erin', 'Becker, Carl', 'Bentsen, Lloyd', 'Beckett, Samuel', 'Blake, William', 'Berger, Ric', 'Beddoes, Mick', 'Beethoven, Ludwig',
      'Belloc, Hilaire', 'Begin, Menachem', 'Bellow, Saul', 'Benchley, Robert', 'Blair, Robert', 'Benenson, Peter', 'Benjamin, Walter', 'Berlin, Irving',
      'Benn, Tony', 'Benson, Leana', 'Bent, Silas', 'Berle, Milton', 'Berry, Halle', 'Biko, Steve', 'Beck, Glenn', 'Bergman, Ingmar', 'Black, Elk', 'Berio, Luciano',
      'Berne, Eric', 'Berra, Yogi', 'Berry, Wendell', 'Bevan, Aneurin', 'Ben-Gurion, David', 'Bevel, Ken', 'Biden, Joseph', 'Bennington, Chester', 'Bierce, Ambrose',
      'Billings, Josh', 'Birrell, Augustine', 'Blair, Tony', 'Beecher, Henry', 'Biondo, Frank'
    ];
    
    // Array.prototype.filter()
    // 1. Filter the list of inventors for those who were born in the 1500's
        console.log(Array.prototype.filter.call(inventors, (person) => person.year >= 1500 && person.year <= 1599));

    // Array.prototype.map()
    // 2. Give us an array of the inventors first and last names
        console.log(Array.prototype.map.call(inventors, (person) => person.first+' '+person.last));

    // Array.prototype.sort()
    // 3. Sort the inventors by birthdate, oldest to youngest
        console.log(Array.prototype.sort.call(inventors, (personA, personB) => personA.year - personB.year));

    // Array.prototype.reduce()
    // 4. How many years did all the inventors live all together?
        console.log(Array.prototype.reduce.call(inventors, (acc, cur) => acc + cur.passed-cur.year, 0));

    // 5. Sort the inventors by years lived
        console.log(Array.prototype.sort.call(inventors, (longevityA, longevityB) => (longevityA.passed-longevityA.year) - (longevityB.passed-longevityB.year)));

    // 6. create a list of Boulevards in Paris that contain 'de' anywhere in the name
    // https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris
const boulevardsWithDe = ["Boulevard de l'Amiral-Bruix", "Boulevard des Capucines", "Boulevard de la Chapelle",
 "Boulevard de Clichy", "Boulevard de l'Hôpital", "Boulevard des Italiens", "Boulevard de la Madeleine", 
"Boulevard de Magenta", "Boulevard Marguerite-de-Rochechouart", "Boulevard de Sébastopol", 
"Boulevard de Strasbourg", "Boulevard de la Zone"];
console.log(boulevardsWithDe);

    // 7. sort Exercise
    // Sort the people alphabetically by last name
//        console.log(Array.prototype.sort.call(inventors, (surnameA, surnameB) => surnameA.last - surnameB.last));
        
// sort by name
console.log(inventors.sort((surnameA, surnameB) => {
  let nameA = surnameA.last.toUpperCase(); // ignore upper and lowercase
  let nameB = surnameB.last.toUpperCase(); // ignore upper and lowercase
  if (nameA < nameB) {
    return -1;
  }
  if (nameA > nameB) {
    return 1;
  }
  // names must be equal
  return 0;
}));

    // 8. Reduce Exercise
    // Sum up the instances of each of these
    const data = ['car', 'car', 'truck', 'truck', 'bike', 'walk', 'car', 'van', 'bike', 'walk', 'car', 'van', 'car', 'truck' ];
        let carCount = 0;
        let truckCount = 0;
        let bikeCount = 0;
        let walkCount = 0;
        let vanCount = 0;

        data.forEach((transportType) => {
            if (transportType == 'car') {
                carCount++;
            }
            if (transportType == 'truck') {
                truckCount++;
            }
            if (transportType == 'bike') {
                bikeCount++;
            } 
            if (transportType == 'walk') {
                walkCount++;
            }
            if (transportType == 'van') {
                vanCount++;
            }
        })
        console.log('cars = ', carCount, 'trucks = ', truckCount, 'bikes = ', bikeCount, 'pedestrians = ', walkCount, 'vans = ', vanCount);

  </script>
</body>
</html>
